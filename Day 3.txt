DAY 3

step 1.5 : LEARN BASIC RECURSION

Problem statement
You are given an integer ‘n’.
Your task is to return an array containing integers from 1 to ‘n’ (in increasing order) without using loops.
Example:
Input: ‘n’ = 5
Output: 1 2 3 4 5
Explanation: An array containing integers from ‘1’ to ‘n’ is [1, 2, 3, 4, 5].

public class Solution {
    public static int[] addElement(int x , int arr[]){
        if(x>=1){
            arr[x-1]=x;
            addElement(x-1,arr);}
            return arr;
        

    }
    public static int[] printNos(int x) {
        // Write Your Code Here
        int arr[] = new int[x];
        return addElement(x,arr);
    }
}
logic:- made a helper function in which it will add the element to array if it is greater than 0
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Problem statement
You are given an integer ‘n’.
Print “Coding Ninjas ” ‘n’ times, without using a loop.
Example:
Input: ‘n’  = 4
Output:
Coding Ninjas Coding Ninjas Coding Ninjas Coding Ninjas 
Explanation: “Coding Ninjas” is printed 4 times. 

import java.util.List;
import java.util.ArrayList;

public class Solution {
    private static List<String> printNtimesHelper(List<String> ls,int n){
        if(n>0){
            ls.add("Coding Ninjas");
            printNtimesHelper(ls,n-1);
        }
        return ls;
    }
    public static List<String> printNtimes(int n){
        List<String> ls = new ArrayList<String>();
        ls = printNtimesHelper(ls,n);
        return ls;
    }
}
Logic notes:- similar logic helper function is needed to do the task.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Problem statement
You are given an integer ‘n’.
Your task is to return an array containing integers from 1 to ‘n’ (in increasing order) without using loops.
Example:
Input: ‘n’ = 5
Output: 1 2 3 4 5
Explanation: An array containing integers from ‘1’ to ‘n’ is [1, 2, 3, 4, 5].

public class Solution
{
    private static int[] addElement(int[] arr, int x,int i){
        if(x>0){
            arr[i] = x;
            i++;
            addElement(arr, x-1,i);
        }
        return arr;
    }
    public static int[] printNos(int x) {
        int arr[] = new int[x];
        int i=0;
        return addElement(arr,x,i);
    }
}
Logic Notes:- to store them in descending order, used an extra variable i to track the index.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Problem statement
You are given an integer ‘n’.
Your task is determining the sum of the first ‘n’ natural numbers and returning it.
Example:
Input: ‘n’ = 3
Output: 6

MY SOLUTION:- 
public class Solution {
    public static long sumFirstN(long n) {
       if(n == 0) return 0;
       return n+sumFirstN(n-1);
       }
}


BUT A BETTER SOLUTION WILL ALWAYS BE:- 

public class Solution {
    public static long sumFirstN(long n) {
       return n*(n+1)/2;
       }
}

LOGIC NOTE:- SUM OF N NATURAL NUMBERS IS N(N+1)/2
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------